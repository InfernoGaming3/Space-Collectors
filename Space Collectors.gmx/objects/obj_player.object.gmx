<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.15;
hsp = 0;
hsp_carry = 0;
vsp = 0;
vsp_carry = 0;
myPlatform = noone;
jumpThrough = false;
movespeed = 1;
max_hsp = 3.5;
grounded = 0;
normal_grav = 1;
jumps = 1;
jumpsmax = 2;
jumpbuffer = 0;
powerup = 0;
canshoot = 0;
crouch = 0;
slideframes = 14;
sliding = 0;
slidoffground = 0
airdrop = false;
airdropland = 0;
gravdirection = 0;
key_down = 0;
act = 0;
alarm12 = 0;
alarm13 = 0;
alarm14 = 0;
alarm15 = 0;
canattack = 0;
victorydance = 0;
camface = 0;
image_speed = 0.2;
ladder = false;
image_blend = -1;
draw_xscale = 1;
draw_yscale = 1;
MyColor = c_white;
slope = 0;
swimming = 0;
torpedo = 0;
torpedodelay = 10;
idleanim = 0;

//Global Variables 
global.dead = 0;
global.flash = 60;
global.invincibility = 0;
global.playerattack = 0;

//Checkpoint Positions
if (global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;
}

//Movespeed Alteration Variables
movespeed_normal = 1;
movespeed_debuffed = 0.5;
movespeed_buffed = 1.5;
movespeed_burst = 5.5;
movespeed_buffedburst = 2;
movespeed_powerup = 2.5;
movespeed_burstpowerup = 3;

//Jumpspeed Alteration Variables
jumpspeed_normal = 6;
jumpspeed_powerup = 9;

//Default Movespeed and Jumpspeed
movespeed = movespeed_normal;
jumpspeed = jumpspeed_normal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flashing Decreasing Code
if (global.flash &gt; 0) {

    global.flash -= 1

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Old Unused Code, this was when game overs were a thing
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>224</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_another_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>11</kind>
            <room>rm_gameover</room>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Torpedo End
torpedo = 0;
hsp += ( 0 - hsp ) * 0.1;
sprite_index = spr_player_swim;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Something About Sliding, and Torpedos
if (swimming = 1) {
if (torpedo = 2) {
torpedo = 0;
hsp += ( 0 - hsp ) * 0.1;
sprite_index = spr_player_swim;
}else{
slidoffground = 0;
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump Buffer, Swim
if (swimming = 1) {
torpedo = 2;
draw_yscale = 0.75;
draw_xscale = 1.25;
}else{
jumpbuffer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slide End
if (powerup != 2) {
crouch = 0;
sliding = 0;
max_hsp = 3;
movespeed = movespeed_normal;
}

if (powerup = 2) {
crouch = 0;
sliding = 0;
max_hsp = 3;
movespeed = movespeed_powerup;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///YellowPowerup Shoot Delay
canshoot = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debuff End
movespeed = movespeed_normal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Powerup End
//Blue Powerup End
if powerup = 1 {
jumpspeed = jumpspeed_normal;
MyColor = -1;
powerup = 0;
}
//Red Powerup End
if powerup = 2 {
movespeed = movespeed_normal;
MyColor = -1;
powerup = 0;
}

if movespeed = movespeed_debuffed {
movespeed = movespeed_normal;
}
//Yellow Powerup End
if powerup = 3 {
MyColor  = -1;
powerup = 0;
}
//Green Powerup End
if powerup = 4 {
MyColor = -1;
grav = 0.15;
global.invincibility = 0;
powerup = 0;
}
//Purple Powerup End
if powerup = 5 {
MyColor  = -1;
grav = 0.15;
powerup = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lighting
if (global.lighting = true) {
size = 128;
draw_set_blend_mode(bm_subtract);
surface_set_target(global.light);
draw_ellipse_color(x-size/2-view_xview, y-size/2-view_yview, x+size/2-view_xview, y+size/2-view_yview, c_white, c_black, false);

surface_reset_target();
draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic Movements
global.pause = 0;
if (global.pause)
{
alarm[0] +=1
alarm[1] +=1
alarm[2] +=1
alarm[3] +=1
alarm[4] +=1
alarm[5] +=1
alarm[6] +=1
alarm[10] +=1
alarm[11] +=1
exit;
}

//Attributes


//Get the player's input
if (victorydance = 0) {
if (act = 0) {
    key_jump = keyboard_check_pressed(vk_space)
if (crouch = 0) {

    key_right = keyboard_check(vk_right);
    key_left = keyboard_check(vk_left);
    key_up  = keyboard_check(vk_up);
    key_down = keyboard_check(vk_down);
    key_swim = keyboard_check(vk_space)
    key_jump_held = keyboard_check(vk_space)
    key_jump_released = keyboard_check_released(vk_space);
}
}
}

//Short Hop Height
if (key_jump_released &amp;&amp; vsp &lt; 0) vsp /= 1.5;

move = key_left + key_right;

//Horizontal Movement
if (swimming = 0) {
if (sliding = 0) {
if (act = 0) {
if (crouch = 0) {
if (key_left) { image_xscale = -1
    if (hsp &gt; -max_hsp * movespeed ) { hsp -= 0.20 * movespeed; }
}

if (key_right) { image_xscale = 1
    if (hsp &lt; max_hsp * movespeed) { hsp += 0.20 * movespeed; }
}
}
}
}
}

//Horizontal Stop

if (sliding = 0) {
if (!key_left &amp;&amp; !key_right) or (key_left &amp;&amp; key_right) {
    hsp += ( 0 - hsp ) * 0.1;

}
}

//Gravity
vsp += grav

//Jumping
if (powerup != 5) {
if (place_meeting(x,y+1,obj_wall))
{
    jumps = jumpsmax;
}
}


if (swimming = 0) {
if (powerup != 5) {
if (key_jump) &amp;&amp; (jumps &gt; 0) &amp;&amp; (jumpbuffer = 0) &amp;&amp; (airdrop = false)
{  
    jumpbuffer = 1;
    alarm[7] = 8;
    jumps -= 1;
    sliding = 0;
    vsp = -jumpspeed;
    draw_yscale = 1.5;
    draw_xscale = 0.75;
     audio_play_sound(snd_jump, 2, false);
}
}
}


if (grounded = 0) &amp;&amp; (jumps &gt;= 2) {

    jumps = 1;
}

//Carry Momentum from Platform
var hsp_final = hsp + hsp_carry;
hsp_carry = 0;


//Horizontal Collision
if (place_meeting(x+hsp_final,y,obj_wall))
{
    yplus = 0;
    while (place_meeting(x+hsp,y-yplus,obj_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus += 1;
    if place_meeting(x+hsp,y-yplus,obj_wall) 
    {
    while(!place_meeting(x+sign(hsp_final),y,obj_wall)) x += sign(hsp_final);  
    hsp_final = 0;
    hsp = 0;
    }
    else
    {
        y -= yplus;
    } 
}

//Finalize Horizontal
x += hsp_final;

//Walking Down Slopes
if !place_meeting(x,y,obj_wall) &amp;&amp; vsp &gt;= 0 &amp;&amp; place_meeting(x,y+2+abs(hsp),obj_wall)
{while(!place_meeting(x,y+1,obj_wall)) {y += 1; slope = 1;}} 

//Carry Momentum from Platform
var vsp_final = vsp + hsp_carry;
vsp_carry = 0;


//Vertical Collision
if (powerup != 5) { 
if (place_meeting(x,y+vsp_final,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp_final),obj_wall)) y += sign(vsp_final);
        if (sign(vsp_final) == 1) {grounded = 1}
        vsp_final = 0;
        vsp = 0;
}
else {grounded = 0}
}

//Finalize Vertical
if (powerup != 5) {
y += vsp;
}

//Squashing the Player for Landing
if (place_meeting(x,y+1,obj_wall) &amp;&amp; !place_meeting(x,yprevious+1,obj_wall))

    if (slope = 0) {
{
    draw_yscale = 0.75;
    draw_xscale = 1.25;
    }
}

//Recover from Squash &amp; Stretch

draw_xscale = lerp(draw_xscale, 1, .2);
draw_yscale = lerp(draw_yscale, 1, .2);


//Crouching
if (swimming = 0) {
if keyboard_check(vk_down) &amp;&amp; (act = 0) &amp;&amp; !(place_meeting(x,y+vsp,obj_platform)) {
if (powerup != 2) {
if (grounded = 1)    {
if (sliding = 0) {
if (victorydance = 0) {
hsp += ( 0 - hsp ) * 0.1;
crouch = 1;
sprite_index = spr_player_crouch;
}
}
}
}
}
}

if keyboard_check_released(vk_down) {
if !place_meeting(x, y - 1, obj_halfwall) {
if (crouch = 1) {
if (sliding = 0) {

    crouch = 0;
    sprite_index = spr_player_idle;

}
}
}
}

if (crouch = 1 &amp;&amp; grounded = 0) {

    crouch = 0;

}


//Sliding
if (swimming = 0) {
if (crouch = 1 &amp;&amp; sliding = 0 &amp;&amp; grounded = 1 &amp;&amp; global.playerattack = 0 &amp;&amp; movespeed != movespeed_debuffed) {   
if (keyboard_check_pressed(vk_right)) {
      if (place_meeting(x+hsp,y,obj_wall)) { //This is what happens when you collide with a wall
            hsp = 0;
            sliding = 0;
        }
    sliding = 1;
    sprite_index = spr_player_slide;
    instance_create(obj_player.x,obj_player.y,obj_dashsmoke);
    if (powerup = 2) hsp = movespeed_burstpowerup * 3 else hsp = movespeed_burst;
    alarm[6] = slideframes;
}
if (keyboard_check_pressed(vk_left)) {
      if (place_meeting(x+hsp,y,obj_wall)) { //This is what happens when you collide with a wall
            hsp = 0;
            sliding = 0;
        }
    sliding = 1;
    sprite_index = spr_player_slide;
    instance_create(obj_player.x,obj_player.y,obj_dashsmoke);
    if (powerup = 2) hsp = -movespeed_burstpowerup * 3 else hsp = -movespeed_burst;
    alarm[6] = slideframes;
}
}

if (sliding = 1 &amp;&amp; grounded = 0) {

    airdrop = false
    crouch = 0;
    sliding = 0;
    slidoffground = 1;
    alarm[8] = 10;

}

if sliding = 1 &amp;&amp; (place_meeting(x+hsp,y,obj_wall))
        {   
            sliding = 0;
            hsp = 0; 
        }
}    


//Sliding From Run
if (swimming = 0) {
if (key_right &amp;&amp; sliding = 0 &amp;&amp; grounded = 1 &amp;&amp; global.playerattack = 0 &amp;&amp; movespeed != movespeed_debuffed) {
if (keyboard_check_pressed(vk_down)) { 
      if (place_meeting(x+hsp,y,obj_wall))        { //This is what happens when you collide with a wall
            hsp = 0;
            sliding = 0;
        }
    sliding = 1;
    sprite_index = spr_player_slide;
    instance_create(obj_player.x,obj_player.y,obj_dashsmoke);
    if (powerup = 2) hsp = movespeed_burstpowerup * 3 else hsp = movespeed_burst;
    alarm[6] = slideframes;
}
}
if (key_left &amp;&amp; sliding = 0 &amp;&amp; grounded = 1 &amp;&amp; global.playerattack = 0 &amp;&amp; movespeed != movespeed_debuffed) {
if (keyboard_check_pressed(vk_down)) { 
      if (place_meeting(x+hsp,y,obj_wall))        { //This is what happens when you collide with a wall
            hsp = 0;
            sliding = 0;
        }
    sliding = 1;
    sprite_index = spr_player_slide;
    instance_create(obj_player.x,obj_player.y,obj_dashsmoke);
    if (powerup = 2) hsp = -movespeed_burstpowerup * 3 else hsp = -movespeed_burst;
    alarm[6] = slideframes;
}
}
}


//Air Drop 

if (powerup != 5) {
if (grounded = 0 &amp;&amp; keyboard_check(vk_down) &amp;&amp; jumpbuffer = 0 &amp;&amp; global.playerattack = 0 &amp;&amp; slidoffground = 0 &amp;&amp; victorydance = 0 &amp;&amp; ladder = false  &amp;&amp; swimming = 0) {   

    airdrop = true
    jumps = 0;
    sprite_index = spr_player_drop
    vsp = +jumpspeed * 1.10;

}
}

if (powerup = 5) {
if (grounded = 0 &amp;&amp; keyboard_check(vk_down) &amp;&amp; jumpbuffer = 0 &amp;&amp; global.playerattack = 0 &amp;&amp; slidoffground = 0 &amp;&amp; ladder = false) {   

    airdrop = true
    jumps = 0;
    sprite_index = spr_player_drop
    vsp = -jumpspeed * 1.10;

}
}

//Landing from an AirDrop

if (powerup != 5) {
if (airdrop = true) &amp;&amp; (place_meeting(x,y+1,obj_wall)) {

    airdrop = false
    instance_create(obj_player.x,obj_player.y-10,obj_landsmoke);
    draw_yscale = 0.75;
    draw_xscale = 1.25;

}
}

if (powerup = 5) {
if (airdrop = true) &amp;&amp; (place_meeting(x,y+1,obj_wall)) {

    airdrop = false
    instance_create(obj_player.x,obj_player.y-10,obj_landsmoke);
    draw_yscale = 0.75;
    draw_xscale = 1.25;

}
} 

if (place_meeting(x,y+1,obj_wall)) {
slidoffground = 0;
}

//Ladder
if (key_up || key_down) &amp;&amp; sliding = 0 &amp;&amp; airdrop = false
{
 if place_meeting(x,y,par_ladder) ladder = true;
}

//if we're on a ladder
if (ladder)
{
    vsp = 0;
    hsp = 0;
    if (key_up) vsp = -2;
    if (key_down) vsp = 2;
    if !place_meeting(x,y,par_ladder) ladder = false
    if (key_jump) ladder = false;
}


//Check if Player is Swimming or Not
if place_meeting(x,y,obj_water) 
{
    swimming = 1;
    grav = 0.05;    
}else{
    swimming = 0;
    grav = 0.15;
}

//Swimming Movement
if (swimming = 1) &amp;&amp; (torpedo = 0)  {
grav = 0.05;
}

if (swimming = 1) &amp;&amp; (torpedo &gt; 0)  {
grav = 0;
}

if (swimming = 1) {
if (key_left) { image_xscale = -1 
    if (hsp &gt; -3.5 * movespeed ) { hsp -= 0.20 * movespeed; }
}

if (key_right) { image_xscale = 1
    if (hsp &lt; 3.5 * movespeed) { hsp += 0.20 * movespeed; }
}
if (key_up) &amp;&amp; (torpedo = 0) {
    if (vsp &gt; -3.5 * movespeed ) { vsp -= 0.20 * movespeed; }
}

if (key_down) &amp;&amp; (torpedo = 0)  {
    if (vsp &lt; 3.5 * movespeed) { vsp += 0.20 * movespeed; }
}
}

//Torpedo Boost
if (swimming = 1) {
if (torpedo = 0) {
if (key_jump) &amp;&amp; (airdrop = false)
{  
    torpedo = 1;
    alarm[7] = 8;
    alarm[8] = 60;
    sprite_index = spr_player_torpedo;
    audio_play_sound(snd_torpedo, 2, false);
    draw_yscale = 1.5;
    draw_xscale = 0.75;
    hsp = image_xscale * movespeed_burst * 2

}
}
}

if (swimming = 1) {
if (torpedo = 2) {
if (key_swim) &amp;&amp; (airdrop = false)
{  
    sprite_index = spr_player_torpedorun;
    hsp = image_xscale * movespeed_burst * 6

}
}
}


if (torpedo = 2) {
if !(key_swim) &amp;&amp; (airdrop = false)
{  
    torpedo = 3;
    hsp += ( 0 - hsp ) * 0.1;
    alarm[9] = torpedodelay;

}
}

//e
if (torpedo &gt; 0) &amp;&amp; (swimming = 0) {
sprite_index = spr_player_jump;
torpedo = 0;
}

//Flashing Invincibility
if (global.flash &gt; 0) {
    image_alpha = 0.5;
}
else {
   image_alpha = 1;
}

if (global.flash &gt; 0) { 

    alarm[11] = 1

}


//Death
if (global.dead = 1) {
    crouch = 0;
    sliding = 0;
    sprite_index = spr_player_death;
    instance_change(obj_dyingplayer, true);
    
}

if (global.dead = 2) {
    crouch = 0;
    sliding = 0;
    sprite_index = spr_player_dissipate;
    instance_change(obj_dyingplayer, true);
    
}

if (global.dead = 3) {
    crouch = 0;
    sliding = 0;
    sprite_index = spr_player_squashed;
    instance_change(obj_dyingplayer, true);
    
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations

//Basic Movement Anims

if (swimming = 0) {
if (torpedo = 0) {
if (crouch = 0) {
if (airdrop = false) {
if (victorydance = 0) {
if (canattack = 0) {
if (act = 0) {
if (place_meeting(x,y+1,obj_wall))
{

    if (move !=0) sprite_index = spr_player_run; else sprite_index = spr_player_idle
}
else
{ 

    if (vsp &lt; 0) sprite_index = spr_player_jump; else sprite_index = spr_player_fall
}

}
}
}
}
}
}
}

//Swim Anim
if (swimming = 1) {
    sprite_index = spr_player_swim;
}

//Turn Around Anim
if (grounded = 1) {
if((hsp &lt; 0 and key_right) or (hsp &gt; 0 and key_left))
if (canattack = 0) {
{
    sprite_index = spr_player_slip;
}
}
}

//Victory Dance Anim

if (victorydance = 1) {

sprite_index = spr_player_dance;
hsp = 0;
movespeed = 0;
global.invincibility = 1;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PowerUp Extras

//Red PowerUp
//Crouching
if (swimming = 0) {
if keyboard_check(vk_down) &amp;&amp; (act = 0) &amp;&amp; !(place_meeting(x,y+vsp,obj_platform)) {
if (powerup = 2) {
if (grounded = 1)   {
if (sliding = 0) {
hsp += ( 0 - hsp ) * 0.1;
crouch = 1;
sprite_index = spr_player_crouch;
        }
    }
}
}
}

///Purple PowerUp
//Jumping
if (powerup = 5) { //This is for the purple powerup, as the gravity flips and jumping sends you down
if (swimming = 0) {
if (key_jump) &amp;&amp; (jumps &gt; 0) &amp;&amp; (jumpbuffer = 0) &amp;&amp; (airdrop = false)
{  
    jumpbuffer = 1;
    alarm[7] = 8;
    jumps -= 1;
    vsp = -jumpspeed;
    draw_yscale = 1.5;
    draw_xscale = 0.75;
     audio_play_sound(snd_jump, 2, false);
}
}
}

if (powerup = 5) { //This is for the purple powerup, as the gravity flips and jumping sends you down
if (place_meeting(x,y-1,obj_wall))
{
    jumps = jumpsmax;
}
}

//Vertical Collision
if (powerup = 5) { //This is for the purple powerup, as the gravity flips
if (place_meeting(x,y-vsp_final,obj_wall))
{
    while(!place_meeting(x,y-sign(vsp_final),obj_wall)) y -= sign(vsp_final);
        if (sign(vsp_final) == 1) {grounded = 1}
        vsp_final = 0;
        vsp = 0;
}
else {grounded = 0}
}

//Finalize Vertical
if (powerup = 5) { //This is for the purple powerup, as the gravity flips
y -= vsp;
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Additional Alarms
if (alarm12 &amp;&amp; !--alarm12) {
    canattack = 0;
    if (sprite_index = spr_player_attack) sprite_index = spr_player_idle;  
}

if (alarm13 &amp;&amp; !--alarm13) {
    victorydance = 0;
    movespeed = 1;
    global.invincibility = 0;
}

if (alarm14 &amp;&amp; !--alarm14) {
    sprite_index = spr_player_idle;
}

if (alarm15 &amp;&amp; !--alarm15) {
    if (room = rm_introduction2) {
    global.invincibility = 0;
    obj_player.x = 4256
    obj_player.y = 288
}
    if (room = rm_level3) {
    global.invincibility = 0;
    obj_player.x = 0
    obj_player.y = 1024
}

if (room = rm_level4) {
    global.invincibility = 0;
    obj_player.x = 128
    obj_player.y = 1248
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_neutral_robot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping Out of Being Pushed
if (place_meeting(x+hsp,y,obj_wall))
{
 vsp = -jumpspeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (move = 0) {
    idleanim += 1;
    if (idleanim = 10) {
    
    sprite_index = spr_player_sleep
    idleanim = 11
    }
}

if (idleanim = 11) {



}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing The Sprite
draw_sprite_ext(sprite_index, image_index, x, y, draw_xscale*image_xscale, draw_yscale*image_yscale, image_angle,  MyColor, image_alpha);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shock
if (canattack = 0 &amp;&amp; sliding = 0 &amp;&amp; airdrop = false &amp;&amp; act = 0){
sprite_index = spr_player_shock;
instance_create(x, y, obj_attackeffect);
audio_play_sound(snd_shock, 2, false);
draw_yscale = 1.2;
draw_xscale = 0.8;
global.playerattack = 1;
canattack = 1;
alarm12 = 50;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting Bullets
if (global.pause = 0) {
if (powerup = 3) {
    if (canshoot = 0) {
        audio_play_sound(snd_shoot, 2, false);
        bullet = instance_create(x,y,obj_bullet);
        bullet.direction = 90 - 90 * image_xscale;
        bullet.image_angle = bullet.direction;
        bullet.speed = 8;
        alarm[3] = 25;
        canshoot = 1;
    }
}

}

if (global.pause = 0) {
if (powerup = 5) {

vsp -= grav;

}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Key
scr_savegame(); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Key
scr_loadgame(); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Restart
if room == rm_movementtesting {

    room_restart()

}

if room == rm_w3_lvl1 {

    room_restart()

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
